"use strict";(()=>{var e={};e.id=606,e.ids=[606],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9491:e=>{e.exports=require("assert")},6113:e=>{e.exports=require("crypto")},2361:e=>{e.exports=require("events")},7147:e=>{e.exports=require("fs")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},1808:e=>{e.exports=require("net")},1017:e=>{e.exports=require("path")},2781:e=>{e.exports=require("stream")},6224:e=>{e.exports=require("tty")},5034:e=>{e.exports=require("url")},3837:e=>{e.exports=require("util")},9796:e=>{e.exports=require("zlib")},107:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>E,requestAsyncStorage:()=>p,routeModule:()=>l,serverHooks:()=>d,staticGenerationAsyncStorage:()=>h});var s={};t.r(s),t.d(s,{GET:()=>c});var a=t(3036),i=t(5736),o=t(5262),n=t(942),u=t(6610);async function c(e){try{let e=new u.$().getAuthorizationUrl();return n.NextResponse.redirect(e)}catch(e){return console.error("Error initiating GitHub OAuth:",e),n.NextResponse.json({error:"Failed to initiate GitHub OAuth",details:e.message},{status:500})}}let l=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/auth/github/route",pathname:"/api/auth/github",filename:"route",bundlePath:"app/api/auth/github/route"},resolvedPagePath:"/home/sanskar/ai-magic/FlowSync/apps/web-app/src/app/api/auth/github/route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:h,serverHooks:d}=l,g="/api/auth/github/route";function E(){return(0,o.patchFetch)({serverHooks:d,staticGenerationAsyncStorage:h})}},6610:(e,r,t)=>{t.d(r,{$:()=>u});var s=t(364);let a=require("pg"),i={user:process.env.POSTGRES_USER||"flowsync",password:process.env.POSTGRES_PASSWORD||"flowsync",host:process.env.POSTGRES_HOST||"localhost",port:parseInt(process.env.POSTGRES_PORT||"5432",10),database:process.env.POSTGRES_DB||"flowsync_dev"},o=new a.Pool(i);class n{static async create(e){let r=await o.connect();try{return(await r.query(`INSERT INTO users (github_id, username, email, avatar_url)
         VALUES ($1, $2, $3, $4)
         RETURNING *`,[e.github_id,e.username,e.email,e.avatar_url])).rows[0]}finally{r.release()}}static async findByGithubId(e){let r=await o.connect();try{let t=await r.query("SELECT * FROM users WHERE github_id = $1",[e]);return t.rows.length>0?t.rows[0]:null}finally{r.release()}}static async findByUsername(e){let r=await o.connect();try{let t=await r.query("SELECT * FROM users WHERE username = $1",[e]);return t.rows.length>0?t.rows[0]:null}finally{r.release()}}}class u{constructor(){this.clientId=process.env.GITHUB_CLIENT_ID||"",this.clientSecret=process.env.GITHUB_CLIENT_SECRET||"",this.redirectUri=process.env.GITHUB_REDIRECT_URI||"http://localhost:4000/auth/github/callback"}getAuthorizationUrl(){return`https://github.com/login/oauth/authorize?client_id=${this.clientId}&redirect_uri=${this.redirectUri}&scope=user:email`}async exchangeCodeForToken(e){try{let r=await s.Z.post("https://github.com/login/oauth/access_token",{client_id:this.clientId,client_secret:this.clientSecret,code:e,redirect_uri:this.redirectUri},{headers:{Accept:"application/json"}});if(r.data.error)throw Error(`GitHub API error: ${r.data.error_description}`);return r.data.access_token}catch(e){if(console.error("Error exchanging code for token:",e),e.response)throw Error(`GitHub API error: ${e.response.status} - ${e.response.statusText}`);if(e.request)throw Error("No response received from GitHub API");throw Error(`Error setting up request: ${e.message}`)}}async getUserInfo(e){try{let r=await s.Z.get("https://api.github.com/user",{headers:{Authorization:`Bearer ${e}`}});return{id:r.data.id,login:r.data.login,email:r.data.email,avatar_url:r.data.avatar_url}}catch(e){if(console.error("Error fetching user info:",e),e.response){if(401===e.response.status)throw Error("Invalid access token");if(403===e.response.status)throw Error("Access to GitHub API forbidden");throw Error(`GitHub API error: ${e.response.status} - ${e.response.statusText}`)}if(e.request)throw Error("No response received from GitHub API");throw Error(`Error setting up request: ${e.message}`)}}async handleOAuthCallback(e){try{let r=await this.exchangeCodeForToken(e),t=await this.getUserInfo(r),s=await n.findByGithubId(t.id);if(s)return s;return s=await n.create({github_id:t.id,username:t.login,email:t.email,avatar_url:t.avatar_url})}catch(e){throw console.error("Error handling OAuth callback:",e),e}}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[522,746,364],()=>t(107));module.exports=s})();